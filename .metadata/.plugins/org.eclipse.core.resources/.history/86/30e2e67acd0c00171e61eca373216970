package visitor;

import ast.Programa;
import ast.definiciones.DefFuncion;
import ast.definiciones.DefVariable;
import ast.definiciones.Definicion;
import ast.expresiones.AccesoArray;
import ast.expresiones.AccesoCampo;
import ast.expresiones.Aritmetica;
import ast.expresiones.Cast;
import ast.expresiones.Comparacion;
import ast.expresiones.Expresion;
import ast.expresiones.LiteralCaracter;
import ast.expresiones.LiteralEntero;
import ast.expresiones.LiteralReal;
import ast.expresiones.Logica;
import ast.expresiones.MenosUnario;
import ast.expresiones.Negacion;
import ast.expresiones.Variable;
import ast.sentencias.Asignacion;
import ast.sentencias.Escritura;
import ast.sentencias.Invocacion;
import ast.sentencias.Lectura;
import ast.sentencias.Return;
import ast.sentencias.Sentencia;
import ast.sentencias.SentenciaIf;
import ast.sentencias.SentenciaWhile;
import ast.tipos.CampoRegistro;
import ast.tipos.TipoArray;
import ast.tipos.TipoCaracter;
import ast.tipos.TipoEntero;
import ast.tipos.TipoError;
import ast.tipos.TipoFuncion;
import ast.tipos.TipoReal;
import ast.tipos.TipoRegistro;
import ast.tipos.TipoVoid;
import tablasimbolos.TablaSimbolos;
import visitor.util.VisitorTemplate;

public class VisitorIdentificacion extends VisitorTemplate {

	private TablaSimbolos tabla = new TablaSimbolos();

	@Override
	public Object visit(DefFuncion defFuncion, Object o) {
		if (tabla.buscar(defFuncion.getNombre()) == null)
			tabla.insertar(defFuncion);
		else
			new TipoError(defFuncion, "Funcion ya declarada");
		tabla.set();
		defFuncion.getTipo().accept(this, o);
		for (DefVariable d : defFuncion.getVariablesLocales())
			d.accept(this, o);
		for (Sentencia s : defFuncion.getCuerpo())
			s.accept(this, o);
		tabla.reset();
		return null;
	}

	@Override
	public Object visit(DefVariable defVariable, Object o) {
		if (tabla.buscarAmbitoActual(defVariable.getNombre()) == null)
			tabla.insertar(defVariable);
		else
			new TipoError(defVariable, "Variable ya declarada "
					+ defVariable.getNombre() + " <- identificación");
		defVariable.getTipo().accept(this, o);
		return null;
	}

	@Override
	public Object visit(Variable variable, Object o) {
		if (tabla.buscar(variable.getClave()) == null)
			new TipoError(variable, "Variable ya declarada "
					+ variable.getClave() + " <- identificación");
		return null;
	}
}
