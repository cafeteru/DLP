%{
// * Declaraciones de código Java
// * Se sitúan al comienzo del archivo generado
// * El package lo añade yacc si utilizamos la opción -Jpackage
import lexico.Lexico;
import java.io.Reader;
%}

// * Declaraciones Yacc
%token CTE_ENTERA CTE_REAL CTE_CARACTER
%token READ WRITE WHILE IF ELSE 
%token INT DOUBLE CHAR STRUCT 
%token RETURN VOID MAIN ID 
%token Y O MAYORIGUALQUE MENORIGUALQUE DISTINTO IGUALDAD

// Más arriba, menos precedencia
%right '='
%left Y O '!'
%left '>' MAYORIGUALQUE MENORIGUALQUE '<' DISTINTO IGUALDAD
%left '+' '-'
%left '*' '/' '%'
%right MENOS_UNARIO
%nonassoc '[' ']'
%left '.'
%nonassoc '(' ')'
%nonassoc '{' '}'

%%
// * Gramática y acciones Yacc
/*programa: funciones main
        ;

main: VOID MAIN '('')' '{' variableFuncion sentencias '}'
    ;*/
    
funciones: funciones funcion
		 | /*vacio*/
		 ;

funcion: tipoFuncion ID '(' parametro ')' '{' cuerpo '}'
	   ;

parametro: parametro variables
		 | /*vacio*/
		 ;
		 
cuerpo: variables sentencias retorno
	  | /*vacio*/
	  ;

retorno: RETURN expresion ';'
		| /*vacio*/
		;

tipoFuncion: VOID
		   | tipoSimple
		   ;

sentencias: sentencias sentencia
	     | sentencia
		 ;
		 	
sentencia: variable '=' expresion ';'
		 | estructura ';'
		 | WHILE '(' expresion ')' '{' sentencias '}'
		 | IF '(' expresion ')' '{' sentencias '}'
		 | IF '(' expresion ')' '{' sentencias '}' ELSE '{' sentencias '}'
		 | WRITE expresiones ';'
		 | READ expresiones ';'
         ;
         
estructura: STRUCT '{' campos '}' ID
		   | variable
		   ;		   

// Campos dentro de un Struct		   
campos: campos estructura
	  | variable ';'
      ;

// Variables locales de las funciones      
variables: variables variable
		 | /*Vacio*/
		 ;

variable: identificador
		| identificador '[' CTE_ENTERA ']'
		| identificador '[' CTE_ENTERA ']' '[' CTE_ENTERA ']'
		| tipoSimple identificador 
		| tipoSimple '[' CTE_ENTERA ']' identificador  
		| tipoSimple '[' CTE_ENTERA ']' '[' CTE_ENTERA ']' identificador 
		;

expresiones: expresiones ',' CTE_CARACTER
		   | CTE_CARACTER
		   ;	   
	  		     
expresion: identificador
         | CTE_ENTERA
         | CTE_REAL
         | CTE_CARACTER
         | expresion '+' expresion
         | expresion '*' expresion 
         | expresion '/' expresion 
         | expresion '-' expresion
         | expresion '%' expresion
         | expresion '>' expresion
         | expresion '<' expresion 
         | expresion MAYORIGUALQUE expresion 
         | expresion MENORIGUALQUE expresion
         | expresion DISTINTO expresion
         | expresion IGUALDAD expresion 
         | expresion Y expresion 
         | expresion O expresion
         | expresion '.' expresion
         | '-' expresion %prec MENOS_UNARIO 
         | '(' expresion ')'
         | ID '(' expresion ')'
         ;
         
identificador: identificador ',' ID 
		     | ID	
		     ;
	
tipoSimple: INT
	| DOUBLE
	| CHAR 
	;
%%

// * Código Java
// * Se crea una clase "Parser", lo que aquí ubiquemos será:
//	- Atributos, si son variables
//	- Métodos, si son funciones
//   de la clase "Parser"

// * Estamos obligados a implementar:
//	int yylex()
//	void yyerror(String)

// * Referencia al analizador léxico
private Lexico lexico;

// * Llamada al analizador léxico
private int yylex () {
    int token=0;
    try { 
	token=lexico.yylex(); 
    } catch(Throwable e) {
	    System.err.println ("Error Léxico en línea " + lexico.getLine()+
		" y columna "+lexico.getColumn()+":\n\t"+e); 
    }
    return token;
}

// * Manejo de Errores Sintácticos
public void yyerror (String error) {
    System.err.println ("Error Sintáctico en línea " + lexico.getLine()+
		" y columna "+lexico.getColumn()+":\n\t"+error);
}

// * Constructor del Sintáctico
public Parser(Lexico lexico) {
	this.lexico = lexico;
}
