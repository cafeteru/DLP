%{
// * Declaraciones de código Java
// * Se sitúan al comienzo del archivo generado
// * El package lo añade yacc si utilizamos la opción -Jpackage
import lexico.Lexico;
import java.io.Reader;
%}

// * Declaraciones Yacc
%token CTE_ENTERA CTE_REAL CTE_CARACTER
%token READ WRITE WHILE IF ELSE 
%token INT DOUBLE CHAR STRUCT 
%token RETURN VOID MAIN ID 
%token Y O MAYORIGUALQUE MENORIGUALQUE DISTINTO IGUALDAD

// Más arriba, menos precedencia
%right '='
%left Y O '!'
%left '>' MAYORIGUALQUE MENORIGUALQUE '<' DISTINTO IGUALDAD
%left '+' '-'
%left '*' '/' '%'
%right MENOS_UNARIO
%right NEGACION
%nonassoc '[' ']'
%left '.'
%nonassoc '(' ')'
%nonassoc '{' '}'

%%
// * Gramática y acciones Yacc
programa: metodos VOID MAIN '('')' '{' sentencias '}'
		;

metodos: metodos metodo
       |/*vacio*/
       ;
  
metodo: funcion
	  | declaracionVariable ';'
	  ;	
     
funcion: tipoFuncion ID '(' parametro ')' '{' cuerpo '}'
	   ;
	   
llamadaFuncion: ID '(' expresiones ')'
			  ;
				
tipoParametro: ID
			 | CTE_ENTERA
			 | CTE_REAL
			 ;
	   
parametro: parametro ',' tipoSimple ID
		 | tipoSimple ID
		 | /*vacio*/
		 ;
		 
cuerpo: sentencias retorno
	  | /*vacio*/
	  ;

retorno: RETURN expresion ';'
		| /*vacio*/
		;

tipoFuncion: VOID
		   | tipoSimple
		   ;

sentencias: sentencias sentencia
	     | sentencia
		 ;
		 	
sentencia: llamadaVariable
		 | declaracionVariable
		 | llamadaVariable '=' expresion ';' // Asignación
		 | declaracionVariable '=' expresion ';' // Asignación
		 | ID '.' ID '=' expresion ';'
		 | estructura ';'
		 | WHILE '(' expresion ')' '{' sentencias '}'
		 | IF '(' expresion ')' '{' sentencias '}'
		 | IF '(' expresion ')' sentencia 
		 | ELSE '{' sentencias '}'
		 | ELSE sentencia
		 | WRITE expresiones ';'
		 | READ expresiones ';'
		 | ID '(' parametroLlamada ')' ';' /*Llamada a funcion*/
		 | llamadaFuncion ';'
         ;
         
parametroLlamada: parametroLlamada ',' tipoParametro
				| /*vacio*/
				;
         
estructura: STRUCT '{' campos '}' ID
		   ;		   

// Campos dentro de un Struct		   
campos: campos estructura
	  | campos llamadaVariable
	  | campos declaracionVariable
	  | llamadaVariable
	  | declaracionVariable
      ;

llamadaVariable: ID
		       | ID '[' expresiones ']'
		       | ID '[' expresiones ']' '[' expresiones ']'
		       ;
		
declaracionVariable: tipoSimple identificador ';'
		           | tipoSimple '[' expresiones ']' identificador ';' 
		           | tipoSimple '[' expresiones ']' '[' expresiones ']' identificador ';'
		           ;

expresiones: expresiones ',' expresion
		   | expresion
		   ;	   
	  		     
expresion: llamadaVariable
		 | CTE_ENTERA
         | CTE_REAL
         | CTE_CARACTER
         | expresion '+' expresion
         | expresion '*' expresion 
         | expresion '/' expresion 
         | expresion '-' expresion
         | expresion '%' expresion
         | expresion '>' expresion
         | expresion '<' expresion 
         | expresion MAYORIGUALQUE expresion 
         | expresion MENORIGUALQUE expresion
         | expresion DISTINTO expresion
         | expresion IGUALDAD expresion 
         | expresion Y expresion 
         | expresion O expresion
         | expresion '.' expresion
         | '-' expresion %prec MENOS_UNARIO 
         | '!' expresion %prec NEGACION 
         | '(' expresion ')'
         | '(' tipoSimple ')' expresion
         | llamadaFuncion
         ;
         
identificador: identificador ',' ID 
		     | ID	
		     ;
	
tipoSimple: INT
	| DOUBLE
	| CHAR 
	;
%%

// * Código Java
// * Se crea una clase "Parser", lo que aquí ubiquemos será:
//	- Atributos, si son variables
//	- Métodos, si son funciones
//   de la clase "Parser"

// * Estamos obligados a implementar:
//	int yylex()
//	void yyerror(String)

// * Referencia al analizador léxico
private Lexico lexico;

// * Llamada al analizador léxico
private int yylex () {
    int token=0;
    try { 
	token=lexico.yylex(); 
    } catch(Throwable e) {
	    System.err.println ("Error Léxico en línea " + lexico.getLine()+
		" y columna "+lexico.getColumn()+":\n\t"+e); 
    }
    return token;
}

// * Manejo de Errores Sintácticos
public void yyerror (String error) {
    System.err.println ("Error Sintáctico en línea " + lexico.getLine()+
		" y columna "+lexico.getColumn()+":\n\t"+error);
}

// * Constructor del Sintáctico
public Parser(Lexico lexico) {
	this.lexico = lexico;
}
